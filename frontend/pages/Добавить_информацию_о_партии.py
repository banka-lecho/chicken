import time
from pathlib import Path
import requests
import pandas as pd
import cv2
import streamlit as st
import os
import pages.utils.helper as helper
import pages.utils.settings as settings
from pages.yolo.model import YOLO
from streamlit_drawable_canvas import st_canvas
from PIL import Image

st.set_page_config(
    page_title="Object Detection using YOLOv8",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("–ü–æ–¥—Å—á—ë—Ç –æ–±—ä–µ–∫—Ç–æ–≤")

st.sidebar.header("–î–µ—Ç–µ–∫—Ü–∏—è –∏ –ø–æ–¥—Å—á—ë—Ç –æ–±—ä–µ–∫—Ç–æ–≤")

from pages.utils.login import check_password

if not check_password():
    st.stop()

response = requests.get('http://backend:9032/camera/')
data = response.json()['cameras']

df = pd.DataFrame(data)

response_chickens = requests.get('http://backend:9032/chickens/')
data_chickens = response_chickens.json()['chickens']
df_chickens = pd.DataFrame(data_chickens)

if df.shape[0] == 0:
    st.write(
        '–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏–∏, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å  –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É"')
else:
    model_path = Path(settings.DETECTION_MODEL)
    try:
        model = YOLO(model_path)
    except Exception as ex:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {model_path}")
        st.error(ex)
    batch_id = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏")
    line_number = st.sidebar.number_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏–Ω–∏–∏", min_value=0, step=1, format="%d")
    cross_ = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—Ä–æ—Å—Å")
    number_machine = st.sidebar.number_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã", min_value=0, step=1, format="%d")

    response_camera = requests.get('http://backend:9032/camera')
    if response_camera.status_code == 200:
        sources = response_camera.json()
        sources = [(camera['name'], camera['rtsp_stream']) for camera in sources['cameras']]
        stream_address = str(sources[0][1])
        # stream_address = str(settings.VIDEO_PATH)
        st.sidebar.write(f'–ö–ê–ú–ï–†–ê: {str(sources[0][0])}')
        submit_button = st.sidebar.button('–ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ö –ö–ê–ú–ï–†–ï')
        st_empty = st.empty()
        submit_button_count = None

        if submit_button:
            if not df_chickens.empty:
                if batch_id in df_chickens['batch_id'].values:
                    st.markdown(
                        "<span style='color:red'>–ü–æ–ª–µ —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –ø–∞—Ä—Ç–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–µ.</span>",
                        unsafe_allow_html=True)
            else:
                st_empty.markdown("<span style='color:red'>–ò–î–Å–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï...</span>", unsafe_allow_html=True)
                time.sleep(2)
                st_empty.markdown("<span style='color:green'>–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ï–°–¢–¨</span>", unsafe_allow_html=True)
                time.sleep(3)
                count_chickens, start, finish = helper.run_counting(model, stream_address)
                start = start.strftime("%Y-%m-%d %H:%M:%S")
                finish = finish.strftime("%Y-%m-%d %H:%M:%S")
                response = requests.post('http://backend:9032/chickens/',
                                         json={"batch_id": batch_id, "start_time": start,
                                               "end_time": finish, "line_number": line_number,
                                               "machine_id": number_machine,
                                               "count": count_chickens, "cross_": cross_})
                if response.status_code == 200:
                    st.markdown("<span style='color:green'>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ</span>",
                                unsafe_allow_html=True)
                else:
                    st.markdown("<span style='color:red'>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ</span>",
                                unsafe_allow_html=True)
                    st.write(response.status_code)
                    st.write(response.text)

    else:
        st.write('Failed to get sources')
